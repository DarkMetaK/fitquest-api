generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Goal {
  LOSE_WEIGHT
  GAIN_MUSCLE_MASS
  ENHANCE_HEALTH
  INCREASE_FLEXIBILITY
}

enum AccountProvider {
  GOOGLE
}

enum TokenType {
  PASSWORD_RECOVER
}

enum BodyRegion {
  HEAD
  NECK
  SHOULDERS
  ARMS
  CHEST
  BACK
  ABS
  GLUTES
  THIGHS
  CALVES
}

enum WorkoutType {
  STANDARD
  CHALLENGE
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String?  @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  metadata           CustomerMetadata?
  finishedWorkouts   FinishedWorkout[]
  accounts           Account[]
  tokens             Token[]
  BundleSubscription BundleSubscription[]

  @@map("users")
}

model CustomerMetadata {
  id               String    @id @default(uuid())
  phone            String    @unique
  age              Int
  weight           Int
  height           Int
  goal             Goal
  experienceAmount Int       @default(0) @map("experience_amount")
  currencyAmount   Int       @default(0) @map("currency_amount")
  premiumExpiresAt DateTime? @map("premium_expires_at")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers_metadata")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@map("accounts")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Exercise {
  id                String       @id @default(uuid())
  name              String
  instructions      String?
  targetedRegions   BodyRegion[] @map("targeted_regions")
  estimatedCalories Int          @map("estimated_calories")
  demonstrationUrl  String       @map("demonstration_url")
  previewUrl        String?      @map("preview_url")
  videoUrl          String?      @map("video_url")
  audioUrl          String?      @map("audio_url")
  repetitions       Int?
  duration          Int?
  createdAt         DateTime     @default(now()) @map("created_at")

  usedAt WorkoutStep[]

  @@map("exercises")
}

model Workout {
  id                  String      @id @default(uuid())
  name                String
  availableExperience Int         @map("available_experience")
  availableCurrency   Int         @map("available_currency")
  bannerUrl           String      @map("banner_url")
  type                WorkoutType @default(STANDARD)
  expiresAt           DateTime?   @map("expires_at")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime?   @updatedAt @map("updated_at")

  steps      WorkoutStep[]
  finishedBy FinishedWorkout[]

  bundleId String? @map("bundle_id")
  Bundle   Bundle? @relation(fields: [bundleId], references: [id])

  @@map("workouts")
}

model WorkoutStep {
  id    String @id @default(uuid())
  order Int

  exerciseId String   @map("exercise_id")
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  workoutId String  @map("workout_id")
  workout   Workout @relation(fields: [workoutId], references: [id])
}

model FinishedWorkout {
  id                 String   @id @default(uuid())
  obtainedExperience Int      @map("obtained_experience")
  obtainedCurrency   Int      @map("obtained_currency")
  finishedAt         DateTime @default(now()) @map("finished_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workoutId String  @map("workout_id")
  workout   Workout @relation(fields: [workoutId], references: [id])

  @@map("finished_workouts")
}

model Bundle {
  id          String   @id @default(uuid())
  name        String
  description String?
  bannerUrl   String   @map("banner_url")
  isPremium   Boolean  @default(true) @map("is_premium")
  createdAt   DateTime @default(now()) @map("created_at")

  workouts      Workout[]
  subscriptions BundleSubscription[]

  @@map("bundles")
}

model BundleSubscription {
  id         String    @id @default(uuid())
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  finishedAt DateTime? @map("finished_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bundleId String @map("bundle_id")
  bundle   Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@unique([userId, bundleId])
  @@map("user_bundles")
}

// TODO: Raffles
// model Bingo {
//   id        String   @id @default(uuid())
//   name      String
//   price     Int
//   isPremium Boolean  @default(false) @map("is_premium")
//   latitude  Decimal
//   longitude Decimal
//   date      DateTime
//   createdAt DateTime @default(now()) @map("created_at")

//   participants UserBingo[]

//   @@map("bingos")
// }

// model UserBingo {
//   id          String    @id @default(uuid())
//   validatedAt DateTime? @map("validated_at")
//   createdAt   DateTime  @default(now()) @map("created_at")

//   userId String @map("user_id")
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   bingoId String @map("bingo_id")
//   bingo   Bingo  @relation(fields: [bingoId], references: [id], onDelete: Cascade)

//   @@map("user_bingos")
// }

// model Raffle {
//   id        String   @id @default(uuid())
//   name      String
//   bannerUrl String   @map("banner_url")
//   price     Int
//   isPremium Boolean  @default(true) @map("is_premium")
//   drawAt    DateTime @map("draw_at")
//   createdAt DateTime @default(now()) @map("created_at")

//   participants UserRaffle[]

//   @@map("raffles")
// }

// model UserRaffle {
//   id        String   @id @default(uuid())
//   hasWon    Boolean? @map("has_won")
//   createdAt DateTime @default(now()) @map("created_at")

//   userId String @map("user_id")
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   raffleId String @map("raffle_id")
//   raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)

//   @@map("user_raffles")
// }

// TODO: Premium membership
